{"version":3,"sources":["Counter.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","className","onClick","plusValue","index","count","resetCounter","deleteCounter","App","useState","counters","setCounters","value","reset","splice","map","el","i","key","r","Math","round","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAEe,SAASA,EAAQC,GAE5B,OACI,6BACI,4BAAQC,UAAW,4BAA6BC,QAAS,kBAAMF,EAAMG,UAAUH,EAAMI,OAAQ,KAA7F,MACA,4BAAQH,UAAW,4BAA6BC,QAAS,kBAAMF,EAAMG,UAAUH,EAAMI,OAAQ,KAA7F,MACA,4BAAQH,UAAW,4BAA6BC,QAAS,kBAAMF,EAAMG,UAAUH,EAAMI,OAAQ,KAA7F,MACA,0BAAMH,UAAW,MAAOD,EAAMK,OAC9B,4BAAQJ,UAAW,4BAA6BC,QAAS,kBAAMF,EAAMG,UAAUH,EAAMI,MAAO,KAA5F,MACA,4BAAQH,UAAW,4BAA6BC,QAAS,kBAAMF,EAAMG,UAAUH,EAAMI,MAAO,KAA5F,MACA,4BAAQH,UAAW,4BAA6BC,QAAS,kBAAMF,EAAMG,UAAUH,EAAMI,MAAO,KAA5F,MACA,4BAAQH,UAAW,4BAA6BC,QAAS,kBAAMF,EAAMM,aAAaN,EAAMI,SAAxF,KACA,4BAAQH,UAAW,2BAA4BC,QAAS,kBAAMF,EAAMO,cAAcP,EAAMI,SAAxF,M,MCTG,SAASI,IAAO,IAAD,EAEMC,mBAAS,CAAC,IAFhB,mBAEnBC,EAFmB,KAETC,EAFS,KAapBR,EAAY,SAACC,EAAOQ,GACtB,IAAIT,EAAS,YAAOO,GACpBP,EAAUC,IAAUQ,EACpBD,EAAYR,IAEVU,EAAQ,SAACT,GACX,IAAIE,EAAY,YAAOI,GACvBJ,EAAaF,GAASE,EAAaF,GAASE,EAAaF,GACzDO,EAAYL,IAEVC,EAAgB,SAACH,GACnB,IAAIG,EAAa,YAAOG,GACxBH,EAAcO,OAAOV,EAAO,GAC5BO,EAAYJ,IAEhB,OACI,yBAAKN,UAAW,OACZ,4BAAQA,UAAW,4BAA6BC,QAvBvC,WACbS,EAAY,YAAID,GAAUK,KAAI,SAAAC,GAAE,OAAI,QAsBhC,KACA,4BAAQf,UAAW,iBAAkBC,QArB3B,WACdS,EAAY,MAoBR,KACA,6BAEA,6BACCD,EAASK,KAAI,SAACC,EAAIC,GAAL,OACV,kBAAClB,EAAD,CACIM,MAAOW,EACPE,IAAKD,EACLb,MAAOa,EACPd,UAAWA,EACXG,aAAcO,EACdN,cAAeA,OAGvB,6BACA,4BAAQN,UAAW,0BAA2BC,QA3CnC,WACf,IAAMiB,EAAIC,KAAKC,MAAsB,GAAhBD,KAAKE,UAC1BX,EAAY,GAAD,mBAAKD,GAAL,CAAeS,OAyCtB,gBCvCQI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.99a6ae7a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Counter(props) {\r\n\r\n    return (\r\n        <div>\r\n            <button className={'btn btn-primary mr-2 mr-2'} onClick={() => props.plusValue(props.index, -3)}>-3</button>\r\n            <button className={'btn btn-primary mr-2 mr-2'} onClick={() => props.plusValue(props.index, -2)}>-2</button>\r\n            <button className={'btn btn-primary mr-2 mr-2'} onClick={() => props.plusValue(props.index, -1)}>-1</button>\r\n            <span className={'h2'}>{props.count}</span>\r\n            <button className={'btn btn-primary ml-1 mr-1'} onClick={() => props.plusValue(props.index, +1)}>+1</button>\r\n            <button className={'btn btn-primary ml-1 mr-1'} onClick={() => props.plusValue(props.index, +2)}>+2</button>\r\n            <button className={'btn btn-primary ml-1 mr-1'} onClick={() => props.plusValue(props.index, +3)}>+3</button>\r\n            <button className={'btn btn-warning ml-1 mr-1'} onClick={() => props.resetCounter(props.index)}>O</button>\r\n            <button className={'btn btn-danger ml-1 mr-1'} onClick={() => props.deleteCounter(props.index)}>X</button>\r\n        </div>\r\n    );\r\n}","import React, {useState} from 'react';\nimport Counter from './Counter';\nimport './App.css';\n\n\nexport default function App() {\n\n    const [counters, setCounters] = useState([0]) //Set initial state of counters / number of counters\n    const addCounter = () => { // function, add a new counter\n        const r = Math.round(Math.random() * 10) // variable with assigned generates random number from 0 to 10 (not included 10)\n        setCounters([...counters, r]) // we use a function that change initial value of counters, in this case, ‘expands’ an iterable object 'counter' into the list of arguments (new counters) with random number\n    };\n    const resetAll = () => { // function reset all counters to 0 number\n        setCounters([...counters].map(el => 0)) //we use a function that change initial value of counters, in this case we use method map that assigns new value 0 for all counters (expanded objects of counters - array)\n    };\n    const deleteAll = () => { //function delete all counters\n        setCounters([]) // we use function, that change initial state of counters and gives result of empty array (in this case delete all counters)\n    };\n    const plusValue = (index, value) => { // function use to change initial state of counters // here we use callback function and receive index and value from Counter component\n        let plusValue = [...counters]; // new variable, 'expands' an iterable object 'counter' into list of new counters\n        plusValue[index] += value; // plus value to each expanded object 'counter' with assigned index and given value that receive from Counter component (callback function)\n        setCounters(plusValue); // update state with new value\n    }\n    const reset = (index) => { //function use to change initial state of counters // here we use callback function and receive index and value from Counter comp\n        let resetCounter = [...counters] //new variable, 'expands' an iterable object 'counter' into list of new counters\n        resetCounter[index] = resetCounter[index] - resetCounter[index]; // new value of counters element with assigned index - the same value with the same index, so we can reset counter\n        setCounters(resetCounter); // update state with new value\n    };\n    const deleteCounter = (index) => { //function use to change initial state of counters // here we use callback function and receive index and value from Counter comp\n        let deleteCounter = [...counters]; // new variable, 'expands' an iterable object 'counter' into list of new counters\n        deleteCounter.splice(index, 1); // use method splice to deleted one object with assigned index\n        setCounters(deleteCounter) // update state with new value;\n    };\n    return (\n        <div className={'App'}>\n            <button className={'btn btn-warning ml-1 mr-1'} onClick={resetAll}>O</button>\n            <button className={'btn btn-danger'} onClick={deleteAll}>X</button>\n            <br/>\n\n            <br/>\n            {counters.map((el, i) =>   // creates a new array populated with the results of calling a provided function on every element of counters\n                <Counter // adding component to main parent component and following below send props (function result)\n                    count={el}\n                    key={i}\n                    index={i}\n                    plusValue={plusValue}\n                    resetCounter={reset}\n                    deleteCounter={deleteCounter}\n\n                />)}\n            <br/>\n            <button className={'btn btn-outline-success'} onClick={addCounter}>Add counter</button>\n\n        </div>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}